name: build

# Build and test NautilusTrader

on:
  push:
    branches: [develop]
  # pull_request:
  # branches: [develop]


jobs:
  publish-wheels:
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]
    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      BUILD_MODE: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust tool-chain (Linux, Windows) stable
        if: (runner.os == 'Linux') || (runner.os == 'Windows')
        uses: actions-rust-lang/setup-rust-toolchain@v1.5
        with:
          toolchain: stable
          components: rustfmt, clippy

      # Work around as actions-rust-lang does not seem to work on macOS yet
      - name: Set up Rust tool-chain (macOS) stable
        if: runner.os == 'macOS'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec

      - name: Setup cached pre-commit
        id: cached-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Setup poetry output (Linux, macOS)
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
        run: echo "dir=$(poetry config cache-dir)" >> $GITHUB_ENV

      - name: Setup poetry output (Windows)
        if: runner.os == 'Windows'
        run: echo "dir=$(poetry config cache-dir)" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV

      - name: Poetry cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Install Redis (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install redis
          redis-server --daemonize yes

      - name: Install Redis (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install redis-server
          redis-server --daemonize yes

      - name: Run nautilus_core cargo tests (Linux, macOS)
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
        run: make cargo-test

      - name: Run tests (Linux, macOS)
        if: (runner.os == 'Linux') || (runner.os == 'macOS')
        run: |
          make pytest
          make test-examples

      # Run tests without parallel build (avoids linker errors)
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          poetry install
          poetry build --format wheel
      #
      # # Upload release asset (UNIX)
      # - name: Set output (UNIX)
      #   id: vars-unix
      #   if: (runner.os == 'Linux') || (runner.os == 'macOS')
      #   run: |
      #     echo "::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)"
      #     cd dist
      #     echo "::set-output name=asset_name::$(printf '%s\0' * | awk 'BEGIN{RS="\0"} {print;  exit}')"
      #
      # - name: Upload release asset (UNIX)
      #   id: upload-release-asset-unix
      #   if: (runner.os == 'Linux') || (runner.os == 'macOS')
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}
      #     ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}
      #   with:
      #     upload_url: ${{ needs.tag-release.outputs.upload_url }}
      #     asset_path: ${{ env.ASSET_PATH }}
      #     asset_name: ${{ env.ASSET_NAME }}
      #     asset_content_type: application/wheel
      #
      # # Upload release asset (Windows)
      # - name: Set output (Windows)
      #   id: vars-windows
      #   if: runner.os == 'Windows'
      #   run: |
      #     echo "::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)"
      #     echo "::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)"
      #
      # - name: Upload release asset (Windows)
      #   id: upload-release-asset-windows
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}
      #     ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}
      #   with:
      #     upload_url: ${{ needs.tag-release.outputs.upload_url }}
      #     asset_path: ${{ env.ASSET_PATH }}
      #     asset_name: ${{ env.ASSET_NAME }}
      #     asset_content_type: application/wheel
      #
      # # Publish
      # - name: Publish to production PyPI
      #   env:
      #     POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: poetry publish
